local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local CoreGui = game:GetService("CoreGui")
local localPlayer = Players.LocalPlayer

local roleMap = {
    ["Security Department"] = "Foundation",
    ["Mobile Task Force"] = "Foundation",
    ["Scientific Department"] = "Foundation",
    ["Medical Department"] = "Foundation",
    ["Rapid Response Team"] = "Foundation",
    ["Internal Security Department"] = "Foundation",
    ["Intelligence Agency"] = "Foundation",
    ["Administrative Department"] = "Foundation",
    ["Class - D"] = "ClassD",
    ["Chaos Insurgency"] = "Chaos",
    ["SCP"] = "SCP"
}

local roleColors = {
    Foundation = {
        ["Security Department"] = Color3.fromRGB(128, 128, 128),
        ["Mobile Task Force"] = Color3.fromRGB(0, 145, 255),
        ["Scientific Department"] = Color3.fromRGB(255, 255, 255),
        ["Medical Department"] = Color3.fromRGB(100, 200, 255),
        ["Rapid Response Team"] = Color3.fromRGB(100, 200, 255),
        ["Internal Security Department"] = Color3.fromRGB(50, 50, 50),
        ["Intelligence Agency"] = Color3.fromRGB(50, 50, 50),
        ["Administrative Department"] = Color3.fromRGB(50, 50, 50)
    },
    ClassD = Color3.fromRGB(255, 120, 0),
    Chaos = Color3.fromRGB(0, 100, 0),
    SCP = Color3.fromRGB(255, 0, 0)
}

local function getColor(plr)
    local teamName = plr.Team and plr.Team.Name
    if not teamName then return end
    local role = roleMap[teamName]
    if not role then return end

    if role == "Foundation" then
        return roleColors.Foundation[teamName]
    else
        return roleColors[role]
    end
end

local function createHighlight(char, color)
    if not char or not char.Parent then return end
    local existing = char:FindFirstChild("WaveESP")
    if existing then existing:Destroy() end
    local hl = Instance.new("Highlight")
    hl.Name = "WaveESP"
    hl.Adornee = char
    hl.FillTransparency = 1
    hl.OutlineTransparency = 0
    hl.OutlineColor = color
    hl.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
    hl.Parent = char
end

local function applyHighlight(plr)
    if plr == localPlayer then return end
    local function onCharacter(char)
        if not char or not char.Parent then return end
        -- Wait for HumanoidRootPart or at least a BasePart to adorn
        local hrp = char:WaitForChild("HumanoidRootPart", 5) or char:FindFirstChildWhichIsA("BasePart")
        if not hrp then return end
        local color = getColor(plr)
        if color then
            createHighlight(char, color)
        else
            -- fallback by name
            local lname = plr.Name:lower()
            if lname:find("chaos") then
                createHighlight(char, roleColors.Chaos)
            elseif lname:find("scp") then
                createHighlight(char, roleColors.SCP)
            end
        end
    end

    plr.CharacterAdded:Connect(onCharacter)
    if plr.Character then onCharacter(plr.Character) end
end

for _, plr in ipairs(Players:GetPlayers()) do
    applyHighlight(plr)
end

Players.PlayerAdded:Connect(applyHighlight)

local Misc = {
    ESPEnabled = true,
    FlashingESPEnabled = true,
    ESPConfig = {
        BoxTransparency = 0.5,
        BoxThickness = 0.1,
    }
}

local ESPFolder = CoreGui:FindFirstChild("CustomESP_Storage") or Instance.new("Folder", CoreGui)
ESPFolder.Name = "CustomESP_Storage"
local espBoxes = {}

local function isValidTarget(player)
    if player == localPlayer or player.Team == localPlayer.Team then return false end
    if not player.Character or not player.Character:IsDescendantOf(workspace) then return false end
    local hum = player.Character:FindFirstChildOfClass("Humanoid")
    return hum and hum.Health > 0
end

local function cleanupPlayerBoxes(player)
    if espBoxes[player] then
        for _, box in pairs(espBoxes[player]) do
            if box and box.Parent then box:Destroy() end
        end
        espBoxes[player] = nil
    end
end

local function updatePlayerBoxes(player)
    if not isValidTarget(player) then
        cleanupPlayerBoxes(player)
        return
    end

    if not espBoxes[player] then espBoxes[player] = {} end
    local parts = {}

    local color = getColor(player) or Color3.fromRGB(173, 216, 230)

    for _, part in ipairs(player.Character:GetChildren()) do
        if part:IsA("BasePart") and part.Transparency < 1 and part.Parent and part:IsDescendantOf(workspace) then
            parts[part] = true
            if not espBoxes[player][part] then
                local box = Instance.new("BoxHandleAdornment")
                box.Adornee = part
                box.AlwaysOnTop = true
                box.ZIndex = 10
                box.Size = part.Size
                box.Transparency = Misc.ESPConfig.BoxTransparency
                box.Color3 = color
                box.Parent = ESPFolder
                espBoxes[player][part] = box
            end
            local flashAlpha = Misc.FlashingESPEnabled and (math.sin(tick() * 5 * math.pi * 2) + 1) / 2 or 1
            espBoxes[player][part].Transparency = Misc.ESPConfig.BoxTransparency * (1 - flashAlpha)
            espBoxes[player][part].Color3 = color
        end
    end

    for part, box in pairs(espBoxes[player]) do
        if not parts[part] then
            box:Destroy()
            espBoxes[player][part] = nil
        end
    end

    if next(espBoxes[player]) == nil then
        espBoxes[player] = nil
    end
end

Players.PlayerRemoving:Connect(cleanupPlayerBoxes)

Players.PlayerAdded:Connect(function(player)
    player.CharacterRemoving:Connect(function()
        cleanupPlayerBoxes(player)
    end)
    player.CharacterAdded:Connect(function(char)
        char.AncestryChanged:Connect(function(_, parent)
            if not parent then
                cleanupPlayerBoxes(player)
            end
        end)
    end)
    applyHighlight(player)
end)

RunService.Heartbeat:Connect(function()
    if not Misc.ESPEnabled then
        for player in pairs(espBoxes) do
            cleanupPlayerBoxes(player)
        end
        return
    end

    for _, player in ipairs(Players:GetPlayers()) do
        updatePlayerBoxes(player)
    end
end)
